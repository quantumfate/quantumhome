# Gets variables from all web applications recursively (for Homer and SWAG)
---
- name: Empty the variables (In case the task is called twice)
  set_fact:
    web_services_to_build: []
  when: (web_services_to_build is defined)

- name: "Web Container Roles: Prepare the data for all the webservices hosted as a webservice"
  block:
    - name: Get a list of web containers to be hosted as a web service and displayed by homer
      delegate_to: localhost
      become: false
      find:
        paths: 
          "{{ webservices_paths }}"
        file_type: directory
        excludes: homer
        recurse: no
      register: webservices
    
    - name: Get a List of roles with other common variables to include
      delegate_to: localhost
      become: false
      find:
        paths: 
          "roles"
        file_type: directory
        patterns:
          - '^homer$'
        recurse: no
      register: roleswithvariables

    - name: Include all main.yml files for webservices and homer
      block:
      - name: Including webservice main.yml
        include_vars:
          dir: "{{ playbook_dir }}/{{ item.path }}/defaults"
          files_matching: main.yml
          name: "{{ item.path.split('/')[-1] }}"
        with_items: "{{ webservices.files }}"
      - name: Including homer main.yml
        include_vars:
          dir: "{{ playbook_dir }}/roles/homer/defaults"
          files_matching: main.yml
          name: "homer"

    - name: Build the key, value pairs that the webservices dictionary consits of
      set_fact:
        web_services_to_build: "{{ web_services_to_build | default({}) | combine({ item.path.split('/')[-1]: { 'role_name': item.path.split('/')[-1], 'path': item.path,  'tag_primary': item.path.split('/')[-1], 'tag_secondary': item.path.split('/')[1], 'logo': '/assets/tools/homer-icons/' + item.path.split('/')[-1] + '.png', 'ip_address': this_current_var.ip_address | default(''), 'name': this_current_var.dashboard_name | default(item.path.split('/')[-1] | title), 'url': this_current_var.url | default(''), 'category': this_current_var.homer_category | default ('') } }) }}"
      vars:
        this_current_var: "{{ lookup('vars', item.path.split('/')[-1]) }}"
      with_items: "{{ webservices.files }}"

    - name: Build the key, value pairs for roleswithvariables
      set_fact:
        roleswithvariables_to_build: "{{ roleswithvariables_to_build | default({}) | combine({ otherroles.path.split('/')[-1]: { 'role_name': otherroles.path.split('/')[-1], 'ip_address': this_current.ip_address, 'url': this_current.url } }) }}"
      vars:
        this_current: "{{ lookup('vars', otherroles.path.split('/')[-1]) }}"
      with_items: "{{ roleswithvariables.files }}"
      loop_control:
        loop_var: otherroles
