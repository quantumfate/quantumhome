---
# - include_tasks: repo_arch.yml

# - name: Install the required system packages
#   ansible.builtin.package:
#     update_cache: yes
#     state: present
#     name: "{{ docker_deps }}"


# - name: Add the Docker gpg key
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     state: present
#     keyring: /usr/share/keyrings/docker-archive-keyring.gpg

# - name: Add the Docker repository
#   apt_repository:
#     repo: "deb [arch={{ repo_arch }}] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
#     update_cache: yes
#     state: present

# - name: Update apt and install docker-ce
#   apt:
#     update_cache: yes
#     name: "{{ docker_packages }}"
#     state: present

- name: Ensure group docker exists
  group:
    name: docker
    state: present

- name: Add user "{{ ansible_user }}" to group docker
  user:
    name: "{{ ansible_user }}"
    groups:
      - docker
    append: yes

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Make sure Docker is running and enabled
  service:
    name: docker
    state: started
    enabled: yes

- name: Get a list of containers
  delegate_to: localhost
  become: false
  find:
    paths:
      - "roles/containers/services"
    file_type: directory
    recurse: no
  register: containers

- name: Stop and remove all the disabled containers
  become: false
  docker_container:
    name: "{{ item.path.split('/')[-1] }}"
    state: absent
  when: not lookup('vars', 'enable_' + item.path.split('/')[-1])
  with_items: "{{ containers.files }}"

- name: Handle persistent data
  become: false
  when: "enable_nas_stuff | default(False)"
  block:
  - name: Check if the persistent data folder exists on the remote machine
    stat:
      path: "{{ docker_dir }}"
    register: persistent_data
    when: "enable_nas_stuff | default(False)"

  - name: Check if the persistent data folder is empty
    find:
      paths:
        - "{{ docker_dir }}/"
      recurse: yes
    register: persistent_data_find
    when: "enable_nas_stuff | default(False)"

  - name: Create the persistent data folder on the remote machine
    become: yes
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0755
      recurse: yes
    when: not persistent_data.stat.exists

  - name: Restore the "{{ docker_dir }}" folder from the MergerFS array
    synchronize:
      src: "{{ mergerfs_root }}/docker_data/data"
      dest: "{{ docker_dir }}/"
      delete: true
      recurse: yes
    delegate_to: "{{ inventory_hostname }}"
    when: persistent_data_find.matched < 20 or not persistent_data.stat.exists
    ignore_errors: true

- name: Chmod the data folder
  become: true
  file:
    dest: "{{ docker_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes