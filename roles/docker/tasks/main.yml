---

- name: Ensure group docker exists
  group:
    name: docker
    state: present

- name: Add user "{{ ansible_user }}" to group docker
  user:
    name: "{{ ansible_user }}"
    groups:
      - docker
    append: yes

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Make sure Docker is running and enabled
  service:
    name: docker
    state: started
    enabled: yes

- name: Get a list of containers
  delegate_to: localhost
  become: false
  find:
    paths:
      - "roles/containers/services"
    file_type: directory
    recurse: no
  register: containers

- name: Stop and remove all the disabled containers
  become: false
  docker_container:
    name: "{{ item.path.split('/')[-1] }}"
    state: absent
  when: not lookup('vars', 'enable_' + item.path.split('/')[-1])
  with_items: "{{ containers.files }}"

- name: Handle persistent data
  become: false
  when: "enable_nas_stuff | default(False)"
  block:
  - name: Check if the persistent data folder exists on the remote machine
    stat:
      path: "{{ docker_dir }}"
    register: persistent_data
    when: "enable_nas_stuff | default(False)"

  - name: Check if the persistent data folder is empty
    find:
      paths:
        - "{{ docker_dir }}/"
      recurse: yes
    register: persistent_data_find
    when: "enable_nas_stuff | default(False)"

  - name: Create the persistent data folder on the remote machine
    become: true
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0755
      recurse: yes
    when: not persistent_data.stat.exists

- name: Execute specific docker tasks on main Host
  block:
  
    - name: Restore the "{{ docker_dir }}" folder from the MergerFS array
      synchronize:
        src: "{{ mergerfs_root }}/docker_data/data"
        dest: "{{ docker_dir }}/"
        delete: true
        recurse: yes
      delegate_to: "{{ inventory_hostname }}"
      when: persistent_data_find.matched < 20 or not persistent_data.stat.exists
      ignore_errors: true

  when: inventory_hostname in groups['main']

- name: Chmod the data folder
  become: true
  file:
    dest: "{{ docker_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes