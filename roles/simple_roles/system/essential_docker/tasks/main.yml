---
- name: Ensure group docker exists
  group:
    name: docker
    state: present

- name: Add user "{{ ansible_user }}" to group docker
  user:
    name: "{{ ansible_user }}"
    groups:
      - docker
    append: yes

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Make sure Docker is running and enabled
  service:
    name: docker
    state: started
    enabled: yes

- name: Stop and remove all the disabled containers if they are explicitely set to no
  become: false
  docker_container:
    name: "{{ main_key.path.split('/')[-1] }}"
    state: absent
  # You really want to make sure here the variable is actually defined...
  # If you check for the variable without lookup() you might delete container
  # that you didn't want to remove
  when: "{{ 'enable_container_' + main_key.value.role_name }} is defined and not {{ 'enable_container_' + main_key.value.role_name }}"
  with_dict: 
    - "{{ system_container_to_build }}"
    - "{{ web_container_to_build }}"
  loop_control:
    loop_var: main_key
   
- name: Check if required variables are set
  when: host_has_backup_data
  block:
    - name: Check if src directory is valid
      fail: 
        msg: "Host has backup data but no valid source has been specified"
      when: essential_docker_backup_src == ''
    - name: Check if there is persistent data that can be backed up
      fail: 
        msg: "Host is supposed to have backup data but host is not supposed to have persistant storage"
      when: not host_has_persistent_data

- name: Raise alert when persistent data exists but backup is disabled
  when: not host_has_backup_data
  block:
    - name: Check if src directory is set
      fail: 
        msg: "Host has no backup data but a valid backup src has been specified"
      when: essential_docker_backup_src != ''
      ignore_errors: true

    - name: Check if there is persistent data that can be backed up
      fail: 
        msg: "Host has no backup data but host has data that might be backed up"
      when: host_has_persistent_data
      ignore_errors: true

- name: Handle persistent data
  become: false
  when: host_has_persistent_data
  block:
  - name: Set the mandatory docker_dir variable
    set_fact:
      docker_dir: "{{ docker_dir }}" # required. The C(set_fact) module takes key=value pairs as variables to set in the playbook scope. Or alternatively, accepts complex arguments using the C(args:) statement.
  - name: Check if the persistent data folder exists on the remote machine
    stat:
      path: "{{ docker_dir }}"
    register: persistent_data

  - name: Check if the persistent data folder is empty
    find:
      paths:
        - "{{ docker_dir }}/"
      recurse: yes
    register: persistent_data_find

  - name: Create the persistent data folder on the remote machine
    become: true
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0755
      recurse: yes
    when: not persistent_data.stat.exists

  - name: Restoring data
    when: host_has_backup_data
    block:
    - name: Restore the "{{ docker_dir }}" folder from the MergerFS array
      synchronize:
        src: "{{ essential_docker_backup_src }}"
        dest: "{{ docker_dir }}/"
        delete: true
        recursive: yes
      delegate_to: "{{ inventory_hostname }}"
      when: (persistent_data_find.matched < 20 or not persistent_data.stat.exists)
      ignore_errors: true

  - name: Chmod the data folder
    become: true
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      recurse: yes